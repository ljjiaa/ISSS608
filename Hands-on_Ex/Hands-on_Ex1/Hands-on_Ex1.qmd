---
title: "Hands-on Exercise 1"
subtitle: "A Layered Grammar of Graphics: ggplot2 methods"
date: January 1, 2024
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  toc: true
---

## Getting started

### Loading R package

First, load R packages using the below code:

```{r}
pacman::p_load(tidyverse)
```

### Importing Data

The code chunk below imports *exam_data.csv* into R environment by using [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) function of [readr](https://readr.tidyverse.org/) package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

### Understanding data

```{r}
head(exam_data)
```

```{r}
summary(exam_data)
```

## Introducing ggplot

[ggplot2](https://ggplot2.tidyverse.org/) is an R packages for declaratively creating graphics, based on The Grammar of Graphics. It is also a part of [Tidyverse](https://www.tidyverse.org/) family.

### Grammar of Graphics

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. It defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

![A Layered Grammar of Graphics](Grammar%20of%20graphics.png)

A short description of each building block are as follows:

-   **Data**: The dataset being plotted.
-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.
-   **Geometrics**: The visual elements used for our data, such as point, bar or line.
-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).
-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).
-   **Coordinate systems** define the plane on which data are mapped on the graphic.
-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

## ggplot2: Geometries

Geometric objects are the actual marks we put on a plot. Refer to complete list [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms). Examples include:

-   [`geom_point`](https://ggplot2.tidyverse.org/reference/geom_point.html) for drawing individual points (e.g., a scatter plot)\
-   [`geom_line`](https://ggplot2.tidyverse.org/reference/geom_path.html) for drawing lines (e.g., for a line charts)\
-   [`geom_smooth`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) for drawing smoothed lines (e.g., for simple trends or approximations)\
-   [`geom_bar`](https://ggplot2.tidyverse.org/reference/geom_bar.html) for drawing bars (e.g., for bar charts)\
-   [`geom_histogram`](https://ggplot2.tidyverse.org/reference/geom_histogram.html) for drawing binned values (e.g. a histogram)\
-   [`geom_polygon`](https://ggplot2.tidyverse.org/reference/geom_polygon.html) for drawing arbitrary shapes\
-   [`geom_map`](https://ggplot2.tidyverse.org/reference/geom_map.html) for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function)\
-   [`geom_dotplot`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) for plotting a dot plot.
-   [`geom_boxplot`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) for distribution of continuous variable.
-   [`geom_density`](https://ggplot2.tidyverse.org/reference/geom_density.html) for plotting kernel density estimate, a smoothed version of histogram.
-   [`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) for compact display of a continuous distribution, blending `geom_boxplot` and `geom_density`.

### Examples of Geom plot

::: panel-tabset
### Bar chart

The code chunk below plots a bar chart by using `geom_bar()`.

```{r}
ggplot(data=exam_data,
       aes(x= RACE)) +
  geom_bar() 
```

### Dotplot

`geom_dotplot()` is used to plot a dot plot. In a dot plot, each dot represents one observation, the width of a dot corresponds to the bin width.

```{r}
ggplot(data=exam_data,
       aes(x=ENGLISH))+
  geom_dotplot(binwidth=2.5,
               dotsize = 0.5)+
  scale_y_continuous(NULL, breaks = NULL)
```

::: callout-note
The code chunk above performs the following two steps:

-   `scale_y_continuous()` is used to turn off the y-axis, and
-   binwidth argument is used to change the binwidth to 2.5
:::

### Histogram

In the code chunk below, `geom_histogram()` is used to create a simple histogram by using values in *MATHS* field of *exam_data*.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()    
```

::: callout-note
Note that the default bin is 30.
:::

### Density plot

`geom-density()` computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of English scores by showing two kernel density lines by using *colour* or *fill* arguments of *aes()*.\

```{r}
ggplot(data=exam_data, 
       aes(x = ENGLISH, 
           colour = GENDER)) +
  geom_density()  
```

### Boxplot

`geom_boxplot()` displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

```{r}
ggplot(data=exam_data, 
       aes(y = ENGLISH,       
           x= GENDER)) +    
  geom_boxplot() 
```

**Notches** are used to compare groups; if the notches of two boxes do not overlap, this suggests that the medians are significantly different.

```{r}
ggplot(data=exam_data, 
       aes(y = ENGLISH, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

### Violin plot

`geom_violin` is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

The code below plot the distribution of English score by race in violin plot.

```{r}
ggplot(data= exam_data,
       aes(y= ENGLISH,
           x= RACE)) +
  geom_violin()
```

### Scatterplot

`geom_point()` is especially useful for creating scatterplot.

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.

```{r}
ggplot(data= exam_data,
      aes(x= MATHS,
          y= ENGLISH)) +
  geom_point()
```
:::

### Modifying the plot

#### By changing `geom()`

Modifying histogram by changing `geom()`

```{r}
ggplot(data=exam_data,
       aes(x= ENGLISH)) +
  geom_histogram(bins=20,
                 color="#000000",
                 fill="lightblue",
                 size=0.6)
```

::: callout-note
Bin, color and fill is now added to the plot
:::

#### By changing `aes()`

Modifying histogram by changing `aes()`

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="Grey30",
                 size=0.6,
                 alpha=0.3)
```

::: callout-note
Instead of showing total count, now they are split into Male and Female
:::

#### By combining two or more geom objects

```{r}
ggplot(data=exam_data,
       aes(y= MATHS,
           x= GENDER)) +
  geom_boxplot(aes(color=GENDER),
               width=0.3)+
  geom_jitter(aes(color=GENDER),
              size= 0.8)
```

## ggplot2: Facets

Facetting generates small multiples, each displaying a different subset of the data. Facets are an alternative to aesthetics for displaying additional discrete variables. There are two types of facets:\
(i) [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html)\
(ii) [`facet_grid`](https://ggplot2.tidyverse.org/reference/facet_grid.html)

### Working with `facet_wrap()`

`facet_wrap()` wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than `facet_grid()` because most displays are roughly rectangular. If you have only one variable with many levels, use `facet_wrap()` instead of `facet_grid`.

```{r}
ggplot(data=exam_data, 
       aes(x= SCIENCE)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

### Working with `facet_grid()`

`facet_grid()` forms a matrix of panels defined by row and column faceting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

```{r}
ggplot(data=exam_data,
       aes(x= SCIENCE,
           y= MATHS))+
  geom_point() +
  facet_grid(~ CLASS)
```

## ggplot2: Statistics

### Working with `stat_summary()`

The code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y="mean",         
               colour ="blue",        
               size=5)        
```

### Working with `geom()` method

The code chunk below adding mean values by using `geom_()` function and overriding the default stat, refer to the function in [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html).

```{r}

ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="green",          
             size=5)        
```

### Adding a best fit curve on a scatterplot

The scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

## ggplot2: Coordinates

The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).
-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.
-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).
-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

### Working with coordinates

By default, the bar chart of ggplot2 is in vertical form. The code chunk below flips the vertical bar chart into horizontal bar chart by using `coord_flip()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

### Changing the y-axis and x-axis range

The x-axis and y-axis could sometimes be misleading. The code chunk below fixed both the y-axis and x-axis range from 0 to 100.

```{r}
ggplot(data=exam_data,
       aes(x= MATHS,
           y= SCIENCE)) +
  geom_point() +
  geom_smooth(method= lm,
              size= 0.5)+
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

Another method to work with x-axis and y-axis range is to use `xlim()` and `ylim()`. Refer to [`scales`](https://ggplot2.tidyverse.org/reference/index.html#scales).

```{r}
ggplot(data=exam_data,
       aes(x= MATHS,
           y= SCIENCE)) +
  geom_point() +
  geom_smooth(method= lm,
              size= 0.5)+
  xlim(0,100) +
  ylim(0,100)
```

## ggplot2: Themes

Themes control elements of the graph not related to the data. For example:

-   background colour
-   size of fonts
-   gridlines
-   colour of labels

Built-in themes include: `theme_gray()` (default) `theme_bw()` `theme_classic()`

A list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title). To modify component of a theme, refer to this [link](https://ggplot2.tidyverse.org/reference/theme.html).

The default theme is `theme_gray()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

A horizontal bar chart plotted using `theme_minimal()`.

```{r}
ggplot(data=exam_data,
       aes(x= RACE)) +
  geom_bar()+
  coord_flip()+
  theme_minimal()
```

## Modifying the plot

Modifying bar chart by\
(i) changing geom()\
(ii) adding labels and title\
(iii) changing the theme

```{r}
ggplot(data=exam_data,
       aes(x= RACE)) +
  geom_bar(alpha= 0.5) +
  labs(x = "Race",
       y = "Number of Students",
       title = "Race Distribution of Exam Data")+
  theme_classic()+
  theme(plot.title = element_text(hjust=0.5))
```

::: callout-note
Opacity of the bar chart has changed.\
X-axis label, y-axis label and title was added.\
A classic-looking theme, with x and y axis lines and no gridlines.
:::
