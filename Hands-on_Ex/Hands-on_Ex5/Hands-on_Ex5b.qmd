---
title: "Hands-on Exercise 5b"
subtitle: "Visual Correlation Analysis"
date: February 7, 2024
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  toc: true
format: 
  html:
    code-fold: false
---

## Overview

Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0, revealing different relationships:

-   1 shows a perfect linear relationship between the two variables
-   -1.0 shows a perfect inverse relationship between the two variables
-   0.0 shows no linear relationship between the two variables

The correlation coefficeints of the pair comparisons are displayed in correlation matrix or scatterplot matrix. There are three broad reasons for computing a correlation matrix.

-   To reveal the relationship between high-dimensional variables pair-wisely.
-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.
-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.

### Loading R packages

```{r}
#| code-fold: false

pacman::p_load(tidyverse, ggstatsplot,corrplot)
```

### Importing Data

In this hands-on exercise, the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository will be used.

```{r}
#| code-fold: false
#| warning: true

wine <- read_csv("data/wine_quality.csv")
```

Let us first started by examining the data table.

::: panel-tabset

#### First 5 rows
```{r}
#| code-fold: false

head(wine,5)
```


#### Structure
```{r}
#| code-fold: false
str(wine)
```
:::

### Building Correlation Matrix: pairs() method

In this section, we learn to create scatterplot matrix by using the [pairs](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) function of R Graphics.

::: panel-tabset
#### basic

Columns 1 to 11 of wine dataframe is used to build the scatterplot matrix.

```{r}
pairs(wine[,1:11])
```

#### Corner

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

#### correlation coefficients

To show the correlation coefficient of each pair of variables instead of a scatter plot, [panel.cor](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used.

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
  usr <- par("usr")
  on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y, use="complete.obs"))
  txt <- format(c(r, 0.123456789), digits=digits)[1]
  txt <- paste(prefix, txt, sep="")
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```
:::

### Visualising Correlation Matrix: `ggcormat()`

In this section, we learn how to visualising correlation matrix by using [`ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) package.

These are some other R packages that provide function to plot corrgram:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)
-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)
-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)

::: panel-tabset
#### basic
This is how a basic correlation matrix look like when using `ggcorrmat()`, for further modification, check out next tab.

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

#### modified

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "grey80", 
                         hc.order = TRUE,
                         tl.cex = 9,
                         lab_size = 3,
                         lab_col = "grey30",
                         pch.cex = 8,
                         pch.col = "grey40"),
  pch = "square cross",
  colors = c("red", "white", "#0072B2"),

  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
) +
theme(legend.text = element_text(size = 8),
      legend.title = element_text(size =12),
      plot.title=element_text(size= 14))
```
:::

More information related to `ggcorrmat()` can be found [here](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) and [here](https://rdrr.io/cran/ggcorrplot/man/ggcorrplot.html).

### Building multiple plots using `grouped_ggcorrmat()`

Instea of `ggcorrmat()`, we use [`grouped_ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of ggstatsplot to create multiple plots.

```{r}
#| fig.height = 6,
#| fig.width = 10

grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 6,
                         lab_size = 2),
  colors = c("red", "white", "#0072B2"),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)+
theme(legend.position = "bottom")
```
::: {.codebox .code data-latex="code"}
**Things to learn from the code chunk above**

-   to build a facet plot, the only argument needed is `grouping.var`.
-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to *[patchwork::wrap_plots](https://patchwork.data-imaginist.com/reference/wrap_plots.html)*, except for guides argument which is already separately specified earlier.
-   Likewise, `annotation.args` argument is calling *[plot annotation arguments](https://patchwork.data-imaginist.com/reference/plot_annotation.html)* of patchwork package.
:::

### Visualising Correlation Matrix using corrplot Package

Refer to [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) in order to gain basic understanding of **corrplot** package.

In the code chunk below, [cor()](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.

```{r}
wine.cor <- cor(wine[, 1:11])
```


#### Basic plot using `corrplot()`

[`corrplot()`](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.

::: panel-tabset
##### Default
```{r}
corrplot(wine.cor)
```
##### method

Currently, `corrplot()` offer 7 visualization methods, named "circle", "square", "ellipse", "number", "pie", "shade" and "color"
```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

```{r}
corrplot(wine.cor, 
         method = "shade") 
```
##### Type
plot "full" matrix or just "upper" or "lower" triangular part of it.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

##### More
The default layout of the corrgram can be [further customised](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot).

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black",
         tl.cex = 0.8)
```
::: {.codebox .code data-latex="code"}
**Arguments**

`diag` - to turn off the diagonal cells  
`tl.col` - to change the axis text label colour to black colour  
`tl.cex` - to adjust the title label size

:::
:::

#### Mixed layout using `corrplot.mixed()`

In this section, we learn to use mixed methods to visualize a correlation matrix by using [`corrplot.mixed()`](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed). We use `lower` and `upper` to specify the method from any of the 7 visualization methods, named "circle", "square", "ellipse", "number", "pie", "shade" and "color".

```{r}
corrplot.mixed(wine.cor, 
               lower = "square", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.cex = 0.8,
               number.cex = 0.7)
```

#### Combining corrgram with the significant test

With corrplot package, we can use the `cor.mtest()` to compute the p-values and confidence interval for each pair of variables.
```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

We can then use the `p.mat` argument of corrplot function as shown in the code chunk below.

```{r}
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05,
         tl.cex = 0.8,
         number.cex = 0.7)
```
::: callout-note
Numbers shows in corrgram is correlation coefficient. Not p-value!
:::

#### Reorder a corrgram
Matrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). Currently, corrplot package support four sorting methods, they are:

-   `AOE` - the angular order of the eigenvectors. See Michael Friendly (2002) for details.
-   `FPC` - first principal component order.
-   [`hclust`](https://www.rdocumentation.org/link/hclust?package=corrplot&version=0.2-0) - hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.
    +   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.
-   `alphabet` for alphabetical order.

The order above can be applied to `corrplot()` and `corrplot.mixed()`.

```{r}
corrplot.mixed(wine.cor, 
               lower = "square", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.cex = 0.8,
               number.cex = 0.7,
               order = "AOE")
```

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black",
         tl.cex = 0.8,
         order = "AOE")
```

Using **hclust**, `corrplot()` can draw rectangles around the corrgram based on the results of hierarchical clustering.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "average",
         addrect = 3)
```
