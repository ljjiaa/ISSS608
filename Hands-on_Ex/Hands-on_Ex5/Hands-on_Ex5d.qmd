---
title: "Hands-on Exercise 5d"
subtitle: "Visual Multivariate Analysis with Parallel Coordinates Plot"
date: February 8, 2024
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  toc: true
format: 
  html:
    code-fold: false
---


## Overview

Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. 

Parallel coordinates plot can be used to characterise clusters detected during customer segmentation.

By the end of this hands-on exercise, we will gain hands-on experience on:

-   plotting statistic parallel coordinates plots by using `ggparcoord()` of **GGally** package,
-   plotting interactive parallel coordinates plots by using **parcoords** package, and
-   plotting interactive parallel coordinates plots by using **parallelPlot** package.

## Installing and Launching R Packages

For this exercise, the **GGally**, **parcoords**, **parallelPlot** and **tidyverse** packages will be used.

The code chunks below are used to install and load the packages in R.

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

## Data Preparation

In this hands-on exercise, the [World Happinees 2018](http://worldhappiness.report/ed/2018/) data will be used. The data set can be downloaded at this [link](https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls). The original data set has been extracted and saved in csv file called **WHData-2018.csv**.

In the code chunk below, `read_csv()` of **readr** package is used to import *WHData-2018.csv* into R and save it into a tibble data frame object called *wh*.

```{r, echo=TRUE, message=TRUE}
wh <- read_csv("data/WHData-2018.csv")
```

## Plotting Static Parallel Coordinates Plot

In this section, you learn how to plot static parallel coordinates plot by using [`ggparcoord()`](https://ggobi.github.io/ggally/reference/ggparcoord.html) of **GGally** package. B\

### Plotting a simple parallel coordinates

Code chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using `ggparcoord()`.

```{r}
#| fig-width: 13
#| fig-height: 6
ggparcoord(data = wh, 
           columns = c(7:12)) +
  theme_minimal()
```

::: callout-note
Notice that only two argument namely `data` and `columns` is used. `Data` argument is used to map the data object (i.e. *wh*) and `columns` is used to select the columns for preparing the parallel coordinates plot.
:::

### Plotting a parallel coordinates with boxplot

The basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by `ggparcoord()`.

```{r}
#| fig-width: 13
#| fig-height: 5
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")
```


::: {.codebox .code data-latex="code"}
**Things to learn from the code chunk above**

-   `groupColumn` argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.
-   `scale` argument is used to scale the variables in the parallel coordinate plot by using `uniminmax` method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\
-   `alphaLines` argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.
-   `boxplot` argument is used to turn on the boxplot by using logical `TRUE`. The default is `FALSE`.
-   `title` argument is used to provide the parallel coordinates plot a title.
:::

### Parallel coordinates with facet

Since `ggparcoord()` is developed by extending **ggplot2** package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.

In the code chunk below, `facet_wrap()` of **ggplot2** is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.

```{r}
#| fig-width: 18
#| fig-height: 8
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30, hjust=1))
```


::: {.codebox .code data-latex="code"}
**Things to learn from the code chunk above**

-   To rotate x-axis text labels, we use `axis.text.x` as argument to `theme()` function. And we specify `element_text(angle = 30)` to rotate the x-axis text by an angle 30 degree.
-   To adjust the x-axis text location, we use `hjust` argument.
:::

## Plotting Interactive Parallel Coordinates Plot: parallelPlot methods

[**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/) is an R package specially designed to plot a parallel coordinates plot by using 'htmlwidgets' package and [d3.js](https://d3js.org/).


::: panel-tabset
### basic

The code chunk below plot an interactive parallel coordinates plot by using `parallelPlot()`.

```{r}
wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250)
```

rotateTitle argument is used to avoid overlapping axis labels.

### Rotate axis label

In the code chunk below, `rotateTitle` argument is used to avoid overlapping axis labels.
One of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.
change the default blue colour scheme by using continousCS argument as shown in the code chunl below.
```{r}
#| fig-width: 12
#| fig-height: 6
parallelPlot(wh,
             width = 320,
             height = 250,
             rotateTitle = TRUE)
```


### Changing the colour scheme

We can change the default blue colour scheme by using `continousCS` argument as shown in the code chunl below.

```{r}
#| fig-width: 12
#| fig-height: 6
parallelPlot(wh,
             width = 320,
             height = 250,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

:::

::: callout-tip
One of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, different intensity colour scheme will be used to highlight the variable chosen.
:::



### Parallel coordinates plot with histogram

In the code chunk below, `histoVisibility` argument is used to plot histogram along the axis of each variables.

```{r}
#| fig-width: 12
#| fig-height: 6
histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             width = 320,
             height = 250,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```
